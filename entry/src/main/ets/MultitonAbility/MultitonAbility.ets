/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { UIAbility,AbilityConstant,Want,Context } from '@kit.AbilityKit'
import { window } from '@kit.ArkUI'
import Logger from '../common/Logger'

const TAG = '[Sample_StartMode]'
interface Data {
  context: Context
  launchWant: Want
}

export default class MultitonAbility extends UIAbility {
  getAbilityDataCallback: Function | undefined = undefined;

  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    Logger.info(TAG, 'MultitonAbility onCreate')
    const that = this
    this.context.eventHub.on('getAbilityData', this.getAbilityDataCallback = (data: Data): void => {
      Logger.info(TAG, 'MainAbility' + JSON.stringify(data))
      data.context = that.context
      data.launchWant = want
    })
  }

  onDestroy() {
    Logger.info(TAG, 'MultitonAbility onDestroy')
  }

  onWindowStageCreate(windowStage: window.WindowStage): void {
    // Main window is created, set main page for this ability
    Logger.info(TAG, 'MultitonAbility onWindowStageCreate')

    windowStage.loadContent('pages/FoodDetail', (err, data) => {
      if (err.code) {
        Logger.info(TAG, 'Failed to load the content. Cause:' + JSON.stringify(err))
        return
      }
      Logger.info(TAG, 'Succeeded in loading the content. Data: ' + JSON.stringify(data))
    })
  }

  onWindowStageDestroy() {
    // Main window is destroyed, release UI related resources
    Logger.info(TAG, 'MultitonAbility onWindowStageDestroy')
  }

  onForeground() {
    // Ability has brought to foreground
    Logger.info(TAG, 'MultitonAbility onForeground')
  }

  onBackground() {
    // Ability has back to background
    Logger.info(TAG, 'MultitonAbility onBackground')
  }
}
